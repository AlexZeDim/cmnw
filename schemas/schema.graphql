type Realm {
    _id: ID!,
    name: String!,
    slug: String!,
}

type Ilvl {
    eq: Int!,
    avg: Int!
}

type Hash {
    a: String,
    b: String,
    c: String,
    ex: String,
    t: String,
}

type Character_Media {
    avatar_url: String,
    bust_url: String,
    render_url: String
}

type Logs {
    root_id: ID!,
    root_history: [String],
    type: String,
    original_value: String,
    new_value: String,
    message: String,
    action: String,
    before: Float,
    after: Float
}

type Guild_Member {
    _id: ID!,
    id: Int,
    rank: Int
}

type Character {
    _id: ID!,
    id: Int!,
    name: String!,
    realm: Realm!,
    guild: Guild,
    ilvl: Ilvl,
    hash: Hash,
    race: String,
    character_class: String,
    spec: String,
    gender: String,
    faction: String,
    level: Int,
    lastModified: Float,
    statisCode: Int,
    media: Character_Media,
    createdBy: String,
    updatedBy: String,
    isWatched: Boolean,
    personality: String,
    logs: [Logs]
    createdAt: Float,
    updatedAt: Float
}

type Guild {
    _id: ID!,
    id: Int!,
    name: String!,
    realm: Realm!,
    faction: String,
    members: [Guild_Member],
    member_count: Int,
    achievement_points: Int,
    created_timestamp: Float,
    lastModified: Float,
    statisCode: Int,
    createdBy: String,
    updatedBy: String,
    isWatched: Boolean,
    logs: [Logs]
    createdAt: Float,
    updatedAt: Float
}

type Name {
    en_US: String,
    es_MX: String,
    pt_BR: String,
    de_DE: String,
    en_GB: String,
    es_ES: String,
    fr_FR: String,
    it_IT: String,
    ru_RU: String
}

type Item {
    _id: ID!,
    name: Name,
    quality: String,
    ilvl: Int,
    level: Int,
    icon: String,
    item_class: String,
    item_subclass: String,
    purchase_price: Float,
    sell_price: Float,
    is_equippable: Boolean,
    is_stackable: Boolean,
    inventory_type: String,
    purchase_quantity: Int,
    loot_type: String,
    contracts: Boolean,
    asset_class: [String],
    expansion: String,
    stackable: Int,
    profession_class: String,
    ticker: String,
    tags: [String],
    createdAt: Float,
    updatedAt: Float
}

type Query {
    character(id: ID!): Character
    guild(id: ID!): Guild
}

