version: '3.8'
services:
  mongo:
    image: mongo
    restart: always
    container_name: mongo
    volumes:
      - ./volumes/mongo:/data/db
    environment:
      - MONGO_INITDB_ROOT_USERNAME=${MONGO_ROOT_USER}
      - MONGO_INITDB_ROOT_PASSWORD=${MONGO_ROOT_PASSWORD}
      - MONGO_INITDB_DATABASE=${MONGO_ROOT_DATABASE}
    ports:
      - '27017-27019:27017-27019'
    networks:
      - conglomerat-network

  redis:
    image: redis:6-alpine
    restart: always
    container_name: redis
    volumes:
      - ./volumes/redis:/data:rw,z
    expose:
      - 6379
    ports:
      - '6379:6379'
    networks:
      - conglomerat-network

  neo4j:
    image: neo4j:4.3.0-community
    restart: always
    container_name: neo4j
    volumes:
      - ./volumes/neo4j/plugins:/plugins
      - ./volumes/neo4j/conf:/conf
      - ./volumes/neo4j/data:/data
      - ./volumes/neo4j/import:/import
      - ./volumes/neo4j/logs:/logs
    environment:
      - NEO4J_dbms_memory_pagecache_size=2G
      - NEO4J_dbms.memory.heap.initial_size=2G
      - NEO4J_dbms_memory_heap_max__size=2G
      - NEO4J_AUTH=neo4j/test
    ports:
      - '7474:7474'
      - '7687:7687'
    networks:
      - conglomerat-network

  commonwealth:
    build: ./
    image: conglomerat
    container_name: commonwealth
    restart: always
    links:
      - mongo
      - redis
    command: [ 'node','dist/apps/conglomerat/main.js' ]
    ports:
      - '5000:8000'
    environment:
      - NODE_ENV=${NODE_ENV:-production}
    depends_on:
      - mongo
      - redis
    networks:
      - conglomerat-network

  keys:
    build: ./
    image: conglomerat
    container_name: keys
    restart: always
    links:
      - mongo
      - redis
    command: [ 'node', 'dist/apps/keys/main.js' ]
    environment:
      - NODE_ENV=${NODE_ENV:-production}
    depends_on:
      - mongo
      - redis
    networks:
      - conglomerat-network

  discord:
    build: ./
    image: conglomerat
    container_name: discord
    restart: always
    links:
      - mongo
      - redis
    command: [ 'node', 'dist/apps/discord/main.js' ]
    environment:
      - NODE_ENV=${NODE_ENV:-production}
    depends_on:
      - mongo
      - redis
    networks:
      - conglomerat-network

  realms:
    build: ./
    image: conglomerat
    restart: always
    container_name: realms
    links:
      - mongo
      - redis
    command: [ 'node', 'dist/apps/realms/main.js' ]
    environment:
      - NODE_ENV=${NODE_ENV:-production}
    depends_on:
      - mongo
      - redis
    networks:
      - conglomerat-network

  characters:
    build: ./
    image: conglomerat
    restart: always
    container_name: characters
    links:
      - mongo
      - redis
    command: [ 'node', 'dist/apps/characters/main.js' ]
    environment:
      - NODE_ENV=${NODE_ENV:-production}
    depends_on:
      - mongo
      - redis
    networks:
      - conglomerat-network

  osint-1:
    build: ./
    image: conglomerat
    restart: always
    container_name: osint-1
    links:
      - mongo
      - redis
    command: [ 'node', 'dist/apps/osint/main.js' ]
    environment:
      - NODE_ENV=${NODE_ENV:-production}
    depends_on:
      - mongo
      - redis
    networks:
      - conglomerat-network

  osint-2:
    build: ./
    image: conglomerat
    restart: always
    container_name: osint-2
    links:
      - mongo
      - redis
    command: [ 'node', 'dist/apps/osint/main.js' ]
    environment:
      - NODE_ENV=${NODE_ENV:-production}
    depends_on:
      - mongo
      - redis
    networks:
      - conglomerat-network

  osint-3:
    build: ./
    image: conglomerat
    restart: always
    container_name: osint-3
    links:
      - mongo
      - redis
    command: [ 'node', 'dist/apps/osint/main.js' ]
    environment:
      - NODE_ENV=${NODE_ENV:-production}
    depends_on:
      - mongo
      - redis
    networks:
      - conglomerat-network

  osint-4:
    build: ./
    image: conglomerat
    restart: always
    container_name: osint-4
    links:
      - mongo
      - redis
    command: [ 'node', 'dist/apps/osint/main.js' ]
    environment:
      - NODE_ENV=${NODE_ENV:-production}
    depends_on:
      - mongo
      - redis
    networks:
      - conglomerat-network

  osint-5:
    build: ./
    image: conglomerat
    restart: always
    container_name: osint-5
    links:
      - mongo
      - redis
    command: [ 'node', 'dist/apps/osint/main.js' ]
    environment:
      - NODE_ENV=${NODE_ENV:-production}
    depends_on:
      - mongo
      - redis
    networks:
      - conglomerat-network

  dma-1:
    build: ./
    image: conglomerat
    restart: always
    container_name: dma-1
    links:
      - mongo
      - redis
    command: [ 'node', '--max-old-space-size=4096', 'dist/apps/dma/main.js' ]
    environment:
      - NODE_ENV=${NODE_ENV:-production}
    depends_on:
      - mongo
      - redis
    networks:
      - conglomerat-network

  dma-2:
    build: ./
    image: conglomerat
    restart: always
    container_name: dma-2
    links:
      - mongo
      - redis
    command: [ 'node', '--max-old-space-size=4096', 'dist/apps/dma/main.js' ]
    environment:
      - NODE_ENV=${NODE_ENV:-production}
    depends_on:
      - mongo
      - redis
    networks:
      - conglomerat-network

  dma-3:
    build: ./
    image: conglomerat
    restart: always
    container_name: dma-3
    links:
      - mongo
      - redis
    command: [ 'node', '--max-old-space-size=4096', 'dist/apps/dma/main.js' ]
    environment:
      - NODE_ENV=${NODE_ENV:-production}
    depends_on:
      - mongo
      - redis
    networks:
      - conglomerat-network

  guilds:
    build: ./
    image: conglomerat
    restart: always
    container_name: guilds
    links:
      - mongo
      - redis
    command: [ 'node', 'dist/apps/guilds/main.js' ]
    environment:
      - NODE_ENV=${NODE_ENV:-production}
    depends_on:
      - mongo
      - redis
    networks:
      - conglomerat-network

  auctions:
    build: ./
    image: conglomerat
    restart: always
    container_name: auctions
    links:
      - mongo
      - redis
    command: [ 'node', 'dist/apps/auctions/main.js' ]
    environment:
      - NODE_ENV=${NODE_ENV:-production}
    depends_on:
      - mongo
      - redis
    networks:
      - conglomerat-network

  contracts:
    build: ./
    image: conglomerat
    restart: always
    container_name: contracts
    links:
      - mongo
      - redis
    command: [ 'node', 'dist/apps/contracts/main.js' ]
    environment:
      - NODE_ENV=${NODE_ENV:-production}
    depends_on:
      - mongo
      - redis
    networks:
      - conglomerat-network

  valuations:
    build: ./
    image: conglomerat
    restart: always
    container_name: valuations
    links:
      - mongo
      - redis
    command: [ 'node', 'dist/apps/valuations/main.js' ]
    environment:
      - NODE_ENV=${NODE_ENV:-production}
    depends_on:
      - mongo
      - redis
    networks:
      - conglomerat-network

  gold:
    build: ./
    image: conglomerat
    restart: always
    container_name: golds
    links:
      - mongo
      - redis
    command: [ 'node', 'dist/apps/gold/main.js' ]
    environment:
      - NODE_ENV=${NODE_ENV:-production}
    depends_on:
      - mongo
      - redis
    networks:
      - conglomerat-network

  wowprogress:
    build: ./
    image: conglomerat
    restart: always
    container_name: wowprogress
    links:
      - mongo
      - redis
    command: [ 'node', 'dist/apps/wowprogress/main.js' ]
    environment:
      - NODE_ENV=${NODE_ENV:-production}
    depends_on:
      - mongo
      - redis
    networks:
      - conglomerat-network

  warcraftlogs:
    build: ./
    image: conglomerat
    restart: always
    container_name: warcraftlogs
    links:
      - mongo
      - redis
    command: [ 'node', 'dist/apps/warcraftlogs/main.js' ]
    environment:
      - NODE_ENV=${NODE_ENV:-production}
    depends_on:
      - mongo
      - redis
    networks:
      - conglomerat-network

  items:
    build: ./
    image: conglomerat
    restart: always
    container_name: items
    links:
      - mongo
      - redis
    command: [ 'node', 'dist/apps/items/main.js' ]
    environment:
      - NODE_ENV=${NODE_ENV:-production}
    depends_on:
      - mongo
      - redis
    networks:
      - conglomerat-network

  pricing:
    build: ./
    image: conglomerat
    restart: always
    container_name: pricing
    links:
      - mongo
      - redis
    command: [ 'node', 'dist/apps/pricing/main.js' ]
    environment:
      - NODE_ENV=${NODE_ENV:-production}
    depends_on:
      - mongo
      - redis
    networks:
      - conglomerat-network

  wowtoken:
    build: ./
    image: conglomerat
    restart: always
    container_name: wowtoken
    links:
      - mongo
      - redis
    command: [ 'node', 'dist/apps/wowtoken/main.js' ]
    environment:
      - NODE_ENV=${NODE_ENV:-production}
    depends_on:
      - mongo
      - redis
    networks:
      - conglomerat-network

# Docker Networks
networks:
  # All container connect in a network
  conglomerat-network:
    driver: bridge

